{"version":3,"sources":["RevealedCell/RevealedCell.js","HiddenCell/HiddenCell.js","Board/Board.js","App/App.js","serviceWorker.js","index.js"],"names":["Cell","evaluateCellClass","props","isMine","mineCount","join","evaluteCellContent","render","className","React","Component","HiddenCell","onClickHandler","event","preventDefault","x","y","isFlagged","toggleFlagCell","revealCell","type","onClick","onContextMenu","BOARD_STATE","Board","height","width","newMatrix","spreadReveal","matrix","isRevealed","state","setState","console","log","evaluateBoardState","map","column","cell","minePositions","some","reduce","sum","key","Math","random","initializeBoard","boardModel","Array","keys","set","Set","size","add","JSON","stringify","round","parse","forEach","prevProps","this","BOARD_PARAMETERS","easy","medium","hard","App","onChangeHandler","difficulty","target","value","board","onChange","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.30c5bb82.chunk.js","sourcesContent":["import React from 'react';\nimport './RevealedCell.css';\n\nexport default class Cell extends React.Component {\n    evaluateCellClass = () => {\n        return ['cell', this.props.isMine ? 'cell-mine' : `cell-value-${this.props.mineCount}`].join(' ');\n    }\n\n    evaluteCellContent = () => {\n        return this.props.isMine ? 'M' : (this.props.mineCount > 0 ? this.props.mineCount : '');\n    }\n\n    render = () => {\n        return (\n            <div className={this.evaluateCellClass()}>{this.evaluteCellContent()}</div>\n        );\n    }\n}\n","import React from 'react';\nimport './HiddenCell.css';\n\nexport default class HiddenCell extends React.Component {\n    onClickHandler = event => {\n        event.preventDefault();\n\n        const { x, y, isFlagged, toggleFlagCell, revealCell } = this.props;\n        if (event.type === 'contextmenu') toggleFlagCell(x, y);\n        else if (event.type === 'click' && !isFlagged) revealCell(x, y);\n    }\n\n    evaluateCellClass = () => {\n        return ['cell', 'cell-hidden', this.props.isFlagged ? 'cell-flagged' : ''].join(' ');\n    }\n\n    evaluteCellContent = () => {\n        return this.props.isFlagged ? 'X' : '';\n    }\n\n    render = () => {\n        return (\n            <div\n                className={this.evaluateCellClass()}\n                onClick={this.onClickHandler}\n                onContextMenu={this.onClickHandler}\n            >{this.evaluteCellContent()}</div>\n        );\n    }\n}\n","import React from 'react';\nimport './Board.css';\nimport RevealedCell from '../RevealedCell/RevealedCell';\nimport HiddenCell from '../HiddenCell/HiddenCell';\n\nconst BOARD_STATE = {\n    GAME_OVER: 'GAME OVER',\n    CONTINUE: 'CONTINUE',\n    WIN: 'WIN'\n};\n\nexport default class Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = this.initializeBoard(props);\n    }\n\n    initializeBoard({ width, height, mineCount }) {\n        const boardModel = [...Array(width).keys()].map(x =>\n            [...Array(height).keys()].map(y => ({\n                x,\n                y,\n                isMine: false,\n                mineCount: 0,\n                isRevealed: false,\n                isFlagged: false\n            }))\n        );\n\n        // Create a set of length mineCount comprising unique random x and y values\n        const set = new Set();\n        while (set.size < mineCount) {\n            // Positions are stringified so the set can ignore duplicate positions\n            set.add(JSON.stringify({\n                x: Math.round(Math.random() * (width - 1)),\n                y: Math.round(Math.random() * (height - 1))\n            }));\n        }\n\n        // Place the mines and increment the count of surrounding cells\n        const minePositions = [...set].map(JSON.parse);\n        minePositions.forEach(({ x, y }) => {\n            if (x > 0 && y > 0) if (!boardModel[x - 1][y - 1].isMine) boardModel[x - 1][y - 1].mineCount++;\n            if (x > 0) if (!boardModel[x - 1][y].isMine) boardModel[x - 1][y].mineCount++;\n            if (x > 0 && y < height - 1) if (!boardModel[x - 1][y + 1].isMine) boardModel[x - 1][y + 1].mineCount++;\n            if (y > 0) if (!boardModel[x][y - 1].isMine) boardModel[x][y - 1].mineCount++;\n            boardModel[x][y].isMine = true;\n            if (y < height - 1) if (!boardModel[x][y + 1].isMine) boardModel[x][y + 1].mineCount++;\n            if (x < width - 1 && y > 0) if (!boardModel[x + 1][y - 1].isMine) boardModel[x + 1][y - 1].mineCount++;\n            if (x < width - 1) if (!boardModel[x + 1][y].isMine) boardModel[x + 1][y].mineCount++;\n            if (x < width - 1 && y < height - 1) if (!boardModel[x + 1][y + 1].isMine) boardModel[x + 1][y + 1].mineCount++;\n        });\n\n        return {\n            minePositions,\n            matrix: boardModel\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        const { height, width, mineCount } = this.props;\n        if (prevProps.height !== height || prevProps.width !== width || prevProps.mineCount !== mineCount) {\n            this.setState(this.initializeBoard(this.props));\n        }\n    }\n\n    revealCell = (x, y) => {\n        // TODO: Handle user selecting a border non-zero cell\n        const { height, width } = this.props;\n        const spreadReveal = (matrix, x, y) => {\n            if (matrix[x][y].isRevealed) return matrix;\n            matrix[x][y].isRevealed = true;\n            if (matrix[x][y].mineCount > 0 || matrix[x][y].isMine) return matrix;\n\n            if (x > 0 && y > 0) matrix = spreadReveal(matrix, x - 1, y - 1);\n            if (x > 0) matrix = spreadReveal(matrix, x - 1, y);\n            if (x > 0 && y < height - 1) matrix = spreadReveal(matrix, x - 1, y + 1);\n            if (y > 0) matrix = spreadReveal(matrix, x, y - 1);\n            if (x < width - 1) matrix = spreadReveal(matrix, x + 1, y);\n            if (x < width - 1 && y > 0) matrix = spreadReveal(matrix, x + 1, y - 1);\n            if (y < height - 1) matrix = spreadReveal(matrix, x, y + 1);\n            if (x < width - 1 && y < height - 1) matrix = spreadReveal(matrix, x + 1, y + 1);\n\n            return matrix;\n        };\n\n        const newMatrix = spreadReveal(this.state.matrix, x, y);\n        this.setState({ matrix: newMatrix });\n        console.log(this.evaluateBoardState());\n    }\n\n    toggleFlagCell = (x, y) => {\n        // Ignore the attempt to toggle the cell flag if the cell is already revealed\n        if (this.state.matrix[x][y].isRevealed) return;\n\n        this.setState({\n            matrix: this.state.matrix.map(column => column.map(cell => ({\n                ...cell,\n                isFlagged: cell.x === x && cell.y === y ? !cell.isFlagged : cell.isFlagged\n            })))\n        });\n    }\n\n    // TODO: Fix game win condition\n    evaluateBoardState = () => {\n        const { height, width, mineCount } = this.props;\n        const { matrix, minePositions } = this.state;\n\n        const revealedMine = minePositions.some(({ x, y }) => matrix[x][y].isRevealed && matrix[x][y].isMine);\n        if (revealedMine) return BOARD_STATE.GAME_OVER;\n\n        const nonMineCount = height * width - mineCount;\n        const revealedCount = matrix.reduce((sum, column) => sum + column.reduce((sum, cell) => sum + cell.isMine ? 0 : 1, 0), 0);\n\n        return nonMineCount === revealedCount ? BOARD_STATE.WIN : BOARD_STATE.CONTINUE;\n    }\n\n    render = () => {\n        return (\n            <div className='board'>\n                {this.state.matrix.map(column =>\n                    <div className='column' key={Math.random()}>\n                        {column.map(cell => cell.isRevealed ?\n                            <RevealedCell key={Math.random()} isMine={cell.isMine} mineCount={cell.mineCount} /> :\n                            <HiddenCell key={Math.random()} x={cell.x} y={cell.y} isFlagged={cell.isFlagged} revealCell={this.revealCell} toggleFlagCell={this.toggleFlagCell} />)}\n                    </div>\n                )}\n            </div>\n        );\n    }\n};\n","import React from 'react';\nimport './App.css';\nimport Board from '../Board/Board';\n\nconst BOARD_PARAMETERS = {\n    easy: { height: 15, width: 15, mineCount: 30 },\n    medium: { height: 25, width: 25, mineCount: 50 },\n    hard: { height: 30, width: 60, mineCount: 200 }\n};\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            difficulty: 'medium',\n            board: BOARD_PARAMETERS['medium']\n        };\n    }\n\n    onChangeHandler = event => {\n        this.setState({\n            difficulty: event.target.value,\n            board: { ...BOARD_PARAMETERS[event.target.value] }\n        });\n    }\n\n    render = () => {\n        const { difficulty } = this.state;\n        const { height, width, mineCount } = BOARD_PARAMETERS[difficulty];\n\n        return (\n            <div className='app'>\n                <form>\n                    <select value={difficulty} onChange={this.onChangeHandler}>\n                        <option value='easy'>Easy</option>\n                        <option value='medium'>Medium</option>\n                        <option value='hard'>Hard</option>\n                    </select>\n                </form>\n                <Board height={height} width={width} mineCount={mineCount} />\n            </div>\n        );\n    }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}