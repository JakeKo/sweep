{"version":3,"sources":["GameControls/GameControls.js","RevealedCell/RevealedCell.js","HiddenCell/HiddenCell.js","utilities.js","Board/Board.js","GameEndAlert/GameEndAlert.js","App/App.js","serviceWorker.js","index.js"],"names":["GameControls","render","props","difficulty","changeGameDifficulty","resetGame","className","value","onChange","onClick","React","Component","Cell","evaluateCellClass","isMine","mineCount","join","evaluteCellContent","HiddenCell","onClickHandler","event","preventDefault","x","y","isFlagged","toggleFlagCell","revealCell","type","onContextMenu","BOARD_STATE","BOARD_PARAMETERS","easy","height","width","medium","hard","formatTimerDisplay","timerValue","Math","floor","toString","padStart","Board","newMatrix","spreadReveal","matrix","isRevealed","state","setState","emitBoardState","evaluateBoardState","map","column","cell","minePositions","some","reduce","sum","key","random","initializeBoard","boardModel","Array","keys","set","Set","size","add","JSON","stringify","round","parse","forEach","prevProps","id","this","GameEndAlert","boardState","Fragment","App","startTimer","timerLoop","setInterval","timer","stopTimer","clearInterval","undefined","target","boardId","respondToBoardState","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5caebe0e.chunk.js","sourcesContent":["import React from 'react';\nimport './GameControls.css';\n\nexport default class GameControls extends React.Component {\n    render = () => {\n        const { difficulty, changeGameDifficulty, resetGame } = this.props;\n\n        return (\n            <form className='game-controls'>\n                <select className='game-difficulty' value={difficulty} onChange={changeGameDifficulty}>\n                    <option value='easy'>EASY</option>\n                    <option value='medium'>MEDIUM</option>\n                    <option value='hard'>HARD</option>\n                </select>\n                <button className='game-reset' onClick={resetGame}>RESET</button>\n            </form>\n        );\n    }\n}","import React from 'react';\nimport './RevealedCell.css';\n\nexport default class Cell extends React.Component {\n    evaluateCellClass = () => {\n        return ['cell', 'cell-revealed', this.props.isMine ? 'cell-mine' : `cell-value-${this.props.mineCount}`].join(' ');\n    }\n\n    evaluteCellContent = () => {\n        return this.props.isMine ? 'M' : (this.props.mineCount > 0 ? this.props.mineCount : '');\n    }\n\n    render = () => {\n        return (\n            <div className={this.evaluateCellClass()}>{this.evaluteCellContent()}</div>\n        );\n    }\n}\n","import React from 'react';\nimport './HiddenCell.css';\n\nexport default class HiddenCell extends React.Component {\n    onClickHandler = event => {\n        event.preventDefault();\n\n        const { x, y, isFlagged, toggleFlagCell, revealCell } = this.props;\n        if (event.type === 'contextmenu') toggleFlagCell(x, y);\n        else if (event.type === 'click' && !isFlagged) revealCell(x, y);\n    }\n\n    evaluateCellClass = () => {\n        return ['cell', 'cell-hidden', this.props.isFlagged ? 'cell-flagged' : ''].join(' ');\n    }\n\n    evaluteCellContent = () => {\n        return this.props.isFlagged ? 'X' : '';\n    }\n\n    render = () => {\n        return (\n            <div\n                className={this.evaluateCellClass()}\n                onClick={this.onClickHandler}\n                onContextMenu={this.onClickHandler}\n            >{this.evaluteCellContent()}</div>\n        );\n    }\n}\n","export const BOARD_STATE = {\n    GAME_OVER: 'GAME OVER',\n    CONTINUE: 'CONTINUE',\n    WIN: 'WIN'\n};\n\nexport const BOARD_PARAMETERS = {\n    easy: {\n        height: 15,\n        width: 15,\n        mineCount: 20\n    },\n    medium: {\n        height: 25,\n        width: 25,\n        mineCount: 75\n    },\n    hard: {\n        height: 30,\n        width: 60,\n        mineCount: 250\n    }\n};\n\nexport const formatTimerDisplay = timerValue => [\n    Math.floor(timerValue / 60).toString().padStart(2, '0'),\n    (timerValue % 60).toString().padStart(2, '0'),\n].join(':');","import React from 'react';\nimport './Board.css';\nimport RevealedCell from '../RevealedCell/RevealedCell';\nimport HiddenCell from '../HiddenCell/HiddenCell';\nimport { BOARD_STATE } from '../utilities';\n\nexport default class Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = this.initializeBoard(props);\n    }\n\n    initializeBoard({ width, height, mineCount }) {\n        const boardModel = [...Array(width).keys()].map(x =>\n            [...Array(height).keys()].map(y => ({\n                x,\n                y,\n                isMine: false,\n                mineCount: 0,\n                isRevealed: false,\n                isFlagged: false\n            }))\n        );\n\n        // Create a set of length mineCount comprising unique random x and y values\n        const set = new Set();\n        while (set.size < mineCount) {\n            // Positions are stringified so the set can ignore duplicate positions\n            set.add(JSON.stringify({\n                x: Math.round(Math.random() * (width - 1)),\n                y: Math.round(Math.random() * (height - 1))\n            }));\n        }\n\n        // Place the mines and increment the count of surrounding cells\n        const minePositions = [...set].map(JSON.parse);\n        minePositions.forEach(({ x, y }) => {\n            if (x > 0 && y > 0) if (!boardModel[x - 1][y - 1].isMine) boardModel[x - 1][y - 1].mineCount++;\n            if (x > 0) if (!boardModel[x - 1][y].isMine) boardModel[x - 1][y].mineCount++;\n            if (x > 0 && y < height - 1) if (!boardModel[x - 1][y + 1].isMine) boardModel[x - 1][y + 1].mineCount++;\n            if (y > 0) if (!boardModel[x][y - 1].isMine) boardModel[x][y - 1].mineCount++;\n            boardModel[x][y].isMine = true;\n            if (y < height - 1) if (!boardModel[x][y + 1].isMine) boardModel[x][y + 1].mineCount++;\n            if (x < width - 1 && y > 0) if (!boardModel[x + 1][y - 1].isMine) boardModel[x + 1][y - 1].mineCount++;\n            if (x < width - 1) if (!boardModel[x + 1][y].isMine) boardModel[x + 1][y].mineCount++;\n            if (x < width - 1 && y < height - 1) if (!boardModel[x + 1][y + 1].isMine) boardModel[x + 1][y + 1].mineCount++;\n        });\n\n        return {\n            minePositions,\n            matrix: boardModel\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.id !== this.props.id) {\n            this.setState(this.initializeBoard(this.props));\n        }\n    }\n\n    // Handle clicking on a cell with the right number of flags around it to reveal adjacent cells\n    revealCell = (x, y) => {\n        const { height, width } = this.props;\n        const spreadReveal = (matrix, x, y) => {\n            if (matrix[x][y].isRevealed) return matrix;\n            matrix[x][y].isRevealed = true;\n            if (matrix[x][y].mineCount > 0 || matrix[x][y].isMine) return matrix;\n\n            if (x > 0 && y > 0) matrix = spreadReveal(matrix, x - 1, y - 1);\n            if (x > 0) matrix = spreadReveal(matrix, x - 1, y);\n            if (x > 0 && y < height - 1) matrix = spreadReveal(matrix, x - 1, y + 1);\n            if (y > 0) matrix = spreadReveal(matrix, x, y - 1);\n            if (x < width - 1) matrix = spreadReveal(matrix, x + 1, y);\n            if (x < width - 1 && y > 0) matrix = spreadReveal(matrix, x + 1, y - 1);\n            if (y < height - 1) matrix = spreadReveal(matrix, x, y + 1);\n            if (x < width - 1 && y < height - 1) matrix = spreadReveal(matrix, x + 1, y + 1);\n\n            return matrix;\n        };\n\n        const newMatrix = spreadReveal(this.state.matrix, x, y);\n        this.setState({ matrix: newMatrix });\n        this.props.emitBoardState(this.evaluateBoardState());\n    }\n\n    toggleFlagCell = (x, y) => {\n        // Ignore the attempt to toggle the cell flag if the cell is already revealed\n        if (this.state.matrix[x][y].isRevealed) return;\n\n        this.setState({\n            matrix: this.state.matrix.map(column => column.map(cell => ({\n                ...cell,\n                isFlagged: cell.x === x && cell.y === y ? !cell.isFlagged : cell.isFlagged\n            })))\n        });\n    }\n\n    evaluateBoardState = () => {\n        const { height, width, mineCount } = this.props;\n        const { matrix, minePositions } = this.state;\n\n        const revealedMine = minePositions.some(({ x, y }) => matrix[x][y].isRevealed && matrix[x][y].isMine);\n        if (revealedMine) return BOARD_STATE.GAME_OVER;\n\n        const nonMineCount = height * width - mineCount;\n        const revealedCount = matrix.reduce((sum, column) => sum + column.reduce((sum, cell) => sum + cell.isRevealed, 0), 0);\n\n        return nonMineCount === revealedCount ? BOARD_STATE.WIN : BOARD_STATE.CONTINUE;\n    }\n\n    render = () => {\n        return (\n            <div className='board'>\n                {this.state.matrix.map(column =>\n                    <div className='column' key={Math.random()}>\n                        {column.map(cell => cell.isRevealed ?\n                            <RevealedCell key={Math.random()} isMine={cell.isMine} mineCount={cell.mineCount} /> :\n                            <HiddenCell key={Math.random()} x={cell.x} y={cell.y} isFlagged={cell.isFlagged} revealCell={this.revealCell} toggleFlagCell={this.toggleFlagCell} />)}\n                    </div>\n                )}\n            </div>\n        );\n    }\n};\n","import React from 'react';\nimport './GameEndAlert.css';\nimport { formatTimerDisplay, BOARD_STATE } from '../utilities';\n\nexport default class GameEndAlert extends React.Component {\n    render = () => {\n        const { boardState, timerValue, resetGame } = this.props;\n        return (\n            <React.Fragment>\n                <div className='game-end-background'></div>\n                <form className='game-end-alert'>\n                    {boardState === BOARD_STATE.WIN ? 'You won!' : 'Game over.'}<br />\n                    Game time: {formatTimerDisplay(timerValue)}\n                    <button className='game-end-acknowledgement' onClick={resetGame}>RESET</button>\n                </form>\n            </React.Fragment>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport GameControls from '../GameControls/GameControls';\nimport Board from '../Board/Board';\nimport GameEndAlert from '../GameEndAlert/GameEndAlert';\nimport { formatTimerDisplay, BOARD_PARAMETERS, BOARD_STATE } from '../utilities';\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            difficulty: 'medium',\n            boardId: Math.random(),\n            boardState: BOARD_STATE.CONTINUE,\n            timer: 0,\n            timerLoop: undefined\n        };\n    }\n\n    startTimer = () => {\n        this.setState({\n            timerLoop: setInterval(() => this.setState({ timer: this.state.timer + 1 }), 1000)\n        });\n    }\n\n    stopTimer = () => {\n        clearInterval(this.state.timerLoop);\n        this.setState({\n            timerLoop: undefined\n        });\n    }\n\n    changeGameDifficulty = event => {\n        this.stopTimer();\n        this.setState({\n            difficulty: event.target.value,\n            boardId: Math.random(),\n            boardState: BOARD_STATE.CONTINUE,\n            timer: 0\n        });\n    }\n\n    resetGame = event => {\n        event.preventDefault();\n\n        this.stopTimer();\n        this.setState({\n            boardId: Math.random(),\n            boardState: BOARD_STATE.CONTINUE,\n            timer: 0\n        });\n    }\n\n    respondToBoardState = boardState => {\n        if (boardState !== BOARD_STATE.CONTINUE) {\n            this.stopTimer();\n        } else if (this.state.timerLoop === undefined) {\n            this.startTimer();\n        }\n\n        this.setState({\n            boardState\n        });\n    }\n\n    render = () => {\n        const { difficulty, boardId, boardState, timer } = this.state;\n        const { height, width, mineCount } = BOARD_PARAMETERS[difficulty];\n\n        return (\n            <div className='app'>\n                <div className='game-timer'>{formatTimerDisplay(timer)}</div>\n                <GameControls difficulty={difficulty} changeGameDifficulty={this.changeGameDifficulty} resetGame={this.resetGame} />\n                <Board id={boardId} height={height} width={width} mineCount={mineCount} emitBoardState={this.respondToBoardState} />\n                {boardState !== BOARD_STATE.CONTINUE && <GameEndAlert boardState={boardState} timerValue={timer} resetGame={this.resetGame} />}\n            </div>\n        );\n    }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}